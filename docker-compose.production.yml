version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: graphrag-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: graphrag
      POSTGRES_USER: ${DB_USER:-graphrag}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-graphrag}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - graphrag-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: graphrag-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - graphrag-network

  # GraphRAG API Service
  graphrag-api:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: graphrag-api
    restart: unless-stopped
    environment:
      # Application settings
      APP_NAME: "GraphRAG API Service"
      DEBUG: "false"
      PORT: 8001
      
      # Database
      DATABASE_URL: postgresql://${DB_USER:-graphrag}:${DB_PASSWORD:-changeme}@postgres:5432/graphrag
      
      # Redis
      REDIS_URL: redis://redis:6379
      
      # LLM Provider
      LLM_PROVIDER: ${LLM_PROVIDER:-ollama}
      
      # Ollama settings (if using)
      OLLAMA_BASE_URL: ${OLLAMA_BASE_URL:-http://ollama:11434}
      OLLAMA_LLM_MODEL: ${OLLAMA_LLM_MODEL:-gemma:3b}
      OLLAMA_EMBEDDING_MODEL: ${OLLAMA_EMBEDDING_MODEL:-nomic-embed-text}
      
      # Google Gemini settings (if using)
      GOOGLE_API_KEY: ${GOOGLE_API_KEY:-}
      GOOGLE_PROJECT_ID: ${GOOGLE_PROJECT_ID:-}
      GEMINI_MODEL: ${GEMINI_MODEL:-gemini-2.0-flash}
      
      # Security
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-changeme-in-production}
      JWT_ALGORITHM: HS256
      JWT_EXPIRATION_DELTA: 3600
      
      # Performance
      CONNECTION_POOL_SIZE: 20
      CACHE_TTL: 3600
      MAX_WORKERS: 4
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config:ro
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - graphrag-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Ollama (optional, for local LLM)
  ollama:
    image: ollama/ollama:latest
    container_name: graphrag-ollama
    restart: unless-stopped
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - "11434:11434"
    networks:
      - graphrag-network
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: graphrag-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_cache:/var/cache/nginx
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - graphrag-api
    networks:
      - graphrag-network

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: graphrag-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - graphrag-network

  # Grafana (Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: graphrag-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - graphrag-network

networks:
  graphrag-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  ollama_data:
  nginx_cache:
  prometheus_data:
  grafana_data: