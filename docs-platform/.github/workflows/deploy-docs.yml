name: Deploy Documentation Platform

on:
  push:
    branches: [main]
    paths:
      - 'docs-platform/**'
      - 'docs/api/**'
      - '.github/workflows/deploy-docs.yml'
  pull_request:
    branches: [main]
    paths:
      - 'docs-platform/**'
      - 'docs/api/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/docs-platform

jobs:
  # Lint and test documentation
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: docs-platform/package-lock.json

      - name: Install dependencies
        working-directory: docs-platform
        run: npm ci

      - name: Lint code
        working-directory: docs-platform
        run: npm run lint

      - name: Type check
        working-directory: docs-platform
        run: npm run typecheck

      - name: Run tests
        working-directory: docs-platform
        run: npm test

      - name: Generate API documentation
        working-directory: docs-platform
        run: npm run generate-api-docs

      - name: Build documentation
        working-directory: docs-platform
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docs-build
          path: docs-platform/build/
          retention-days: 7

  # Build and push Docker image
  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: docs-platform
          file: docs-platform/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://docs-staging.graphrag.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        uses: ./.github/actions/deploy-docs
        with:
          environment: staging
          image-tag: ${{ needs.build.outputs.image-tag }}
          deploy-key: ${{ secrets.STAGING_DEPLOY_KEY }}
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}

      - name: Run smoke tests
        run: |
          curl -f https://docs-staging.graphrag.com/health || exit 1
          curl -f https://docs-staging.graphrag.com/api || exit 1

      - name: Update search index
        if: success()
        run: |
          curl -X POST "${{ secrets.ALGOLIA_WEBHOOK_URL }}" \
            -H "Authorization: Bearer ${{ secrets.ALGOLIA_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"url": "https://docs-staging.graphrag.com"}'

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://docs.graphrag.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        uses: ./.github/actions/deploy-docs
        with:
          environment: production
          image-tag: ${{ needs.build.outputs.image-tag }}
          deploy-key: ${{ secrets.PRODUCTION_DEPLOY_KEY }}
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}

      - name: Run production smoke tests
        run: |
          curl -f https://docs.graphrag.com/health || exit 1
          curl -f https://docs.graphrag.com/api || exit 1
          curl -f https://docs.graphrag.com/playground || exit 1

      - name: Update production search index
        if: success()
        run: |
          curl -X POST "${{ secrets.ALGOLIA_WEBHOOK_URL }}" \
            -H "Authorization: Bearer ${{ secrets.ALGOLIA_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"url": "https://docs.graphrag.com"}'

      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          message: |
            üöÄ Documentation platform deployed successfully!
            
            üìñ **Documentation**: https://docs.graphrag.com
            üéÆ **API Playground**: https://docs.graphrag.com/playground
            üìä **Status**: All systems operational
            
            **Changes**: ${{ github.event.head_commit.message }}
            **Commit**: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          message: |
            ‚ùå Documentation platform deployment failed!
            
            **Environment**: Production
            **Commit**: ${{ github.sha }}
            **Workflow**: ${{ github.workflow }}
            
            Please check the deployment logs and take action.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Performance testing
  performance-test:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI
        run: |
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          LHCI_SERVER_BASE_URL: https://docs-staging.graphrag.com

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 30
