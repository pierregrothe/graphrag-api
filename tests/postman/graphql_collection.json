{
  "info": {
    "name": "GraphRAG GraphQL Collection",
    "description": "GraphQL API tests for GraphRAG API Service",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Queries",
      "item": [
        {
          "name": "Get Entities",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('GraphQL response structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('entities');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query GetEntities($limit: Int!) {\n  entities(limit: $limit) {\n    id\n    title\n    type\n    description\n    degree\n    communityIds\n  }\n}",
                "variables": "{\n  \"limit\": 10\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": ["{{base_url}}"],
              "path": ["graphql"]
            }
          }
        },
        {
          "name": "Get Relationships",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Has relationships data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('relationships');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query GetRelationships($limit: Int!) {\n  relationships(limit: $limit) {\n    id\n    source\n    target\n    type\n    description\n    weight\n  }\n}",
                "variables": "{\n  \"limit\": 10\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": ["{{base_url}}"],
              "path": ["graphql"]
            }
          }
        },
        {
          "name": "Get Communities",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Has communities data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('communities');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query GetCommunities {\n  communities(limit: 10) {\n    id\n    level\n    title\n    entityIds\n    relationshipIds\n  }\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": ["{{base_url}}"],
              "path": ["graphql"]
            }
          }
        },
        {
          "name": "Get Graph Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Has statistics fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const stats = jsonData.data.graphStatistics;",
                  "    pm.expect(stats).to.have.property('totalEntities');",
                  "    pm.expect(stats).to.have.property('totalRelationships');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query GetStatistics {\n  graphStatistics {\n    totalEntities\n    totalRelationships\n    totalCommunities\n    graphDensity\n    connectedComponents\n  }\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": ["{{base_url}}"],
              "path": ["graphql"]
            }
          }
        },
        {
          "name": "Get Workspaces",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Has workspaces array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.workspaces).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query GetWorkspaces {\n  workspaces {\n    id\n    name\n    description\n    dataPath\n    status\n    createdAt\n    updatedAt\n  }\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": ["{{base_url}}"],
              "path": ["graphql"]
            }
          }
        },
        {
          "name": "Get System Health",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Has health status', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const health = jsonData.data.systemHealth;",
                  "    pm.expect(health).to.have.property('status');",
                  "    pm.expect(health).to.have.property('timestamp');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query GetSystemHealth {\n  systemHealth {\n    status\n    timestamp\n    components\n    systemResources\n  }\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": ["{{base_url}}"],
              "path": ["graphql"]
            }
          }
        }
      ]
    },
    {
      "name": "Mutations",
      "item": [
        {
          "name": "Create Workspace",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Workspace created', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const workspace = jsonData.data.createWorkspace;",
                  "    pm.expect(workspace).to.have.property('id');",
                  "    pm.environment.set('graphql_workspace_id', workspace.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation CreateWorkspace($input: WorkspaceInput!) {\n  createWorkspace(input: $input) {\n    id\n    name\n    description\n    dataPath\n    status\n  }\n}",
                "variables": "{\n  \"input\": {\n    \"name\": \"graphql-test-{{$timestamp}}\",\n    \"description\": \"Created via GraphQL\",\n    \"dataPath\": \"./test_data\"\n  }\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": ["{{base_url}}"],
              "path": ["graphql"]
            }
          }
        },
        {
          "name": "Update Workspace",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Workspace updated', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const workspace = jsonData.data.updateWorkspace;",
                  "    pm.expect(workspace.description).to.equal('Updated via GraphQL');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation UpdateWorkspace($id: ID!, $input: WorkspaceUpdateInput!) {\n  updateWorkspace(id: $id, input: $input) {\n    id\n    description\n  }\n}",
                "variables": "{\n  \"id\": \"{{graphql_workspace_id}}\",\n  \"input\": {\n    \"description\": \"Updated via GraphQL\"\n  }\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": ["{{base_url}}"],
              "path": ["graphql"]
            }
          }
        },
        {
          "name": "Execute Query",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 500', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 500]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Query executed', function () {",
                  "        const jsonData = pm.response.json();",
                  "        const result = jsonData.data.executeQuery;",
                  "        pm.expect(result).to.have.property('response');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation ExecuteQuery($input: QueryInput!) {\n  executeQuery(input: $input) {\n    query\n    response\n    queryType\n    processingTime\n  }\n}",
                "variables": "{\n  \"input\": {\n    \"query\": \"What is GraphRAG?\",\n    \"queryType\": \"LOCAL\",\n    \"workspaceId\": \"default\"\n  }\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": ["{{base_url}}"],
              "path": ["graphql"]
            }
          }
        },
        {
          "name": "Clear Cache",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Cache cleared', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const result = jsonData.data.clearCache;",
                  "    pm.expect(result).to.have.property('success');",
                  "    pm.expect(result.success).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation ClearCache($namespace: String) {\n  clearCache(namespace: $namespace) {\n    success\n    message\n    filesCleared\n    bytesFreed\n  }\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": ["{{base_url}}"],
              "path": ["graphql"]
            }
          }
        },
        {
          "name": "Delete Workspace",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Workspace deleted', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const result = jsonData.data.deleteWorkspace;",
                  "    pm.expect(result.success).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation DeleteWorkspace($id: ID!) {\n  deleteWorkspace(id: $id) {\n    success\n    message\n  }\n}",
                "variables": "{\n  \"id\": \"{{graphql_workspace_id}}\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": ["{{base_url}}"],
              "path": ["graphql"]
            }
          }
        }
      ]
    },
    {
      "name": "Introspection",
      "item": [
        {
          "name": "Schema Introspection",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Has schema information', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const schema = jsonData.data.__schema;",
                  "    pm.expect(schema).to.have.property('queryType');",
                  "    pm.expect(schema).to.have.property('mutationType');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query IntrospectionQuery {\n  __schema {\n    queryType {\n      name\n    }\n    mutationType {\n      name\n    }\n    subscriptionType {\n      name\n    }\n  }\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": ["{{base_url}}"],
              "path": ["graphql"]
            }
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8001",
      "type": "string"
    }
  ]
}
