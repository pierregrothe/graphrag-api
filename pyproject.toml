[tool.poetry]
name = "graphrag_api_service"
version = "0.1.0"
description = ""
authors = ["Pierre Groth√© <pierre@grothe.ca>"]
readme = "README.md"
packages = [{include = "graphrag_api_service", from = "src"}]

[tool.poetry.dependencies]
python = ">=3.12,<3.13"
graphrag = "^2.5.0"
fastapi = "^0.116.1"
uvicorn = {extras = ["standard"], version = "^0.35.0"}
pydantic = "^2.10.0"
pydantic-settings = "^2.7.0"
email-validator = "^2.1.0"
python-multipart = "^0.0.18"
ollama = "^0.5.3"
google-cloud-aiplatform = "^1.111.0"
google-generativeai = "^0.8.5"
pandas = "^2.3.2"
psutil = "^7.0.0"
strawberry-graphql = {extras = ["fastapi"], version = "^0.281.0"}

# Database and caching dependencies
sqlalchemy = "^2.0.0"
psycopg2-binary = "^2.9.9"
redis = "^5.0.0"
alembic = "^1.13.0"

# Monitoring and observability dependencies
prometheus-client = "^0.19.0"
opentelemetry-api = "^1.23.0"
opentelemetry-sdk = "^1.23.0"
opentelemetry-exporter-jaeger = "^1.21.0"
opentelemetry-exporter-otlp = "^1.23.0"
opentelemetry-semantic-conventions = "^0.44b0"
opentelemetry-instrumentation = "^0.44b0"
opentelemetry-instrumentation-fastapi = "^0.44b0"
opentelemetry-instrumentation-httpx = "^0.44b0"
opentelemetry-instrumentation-logging = "^0.44b0"
opentelemetry-instrumentation-psycopg2 = "^0.44b0"
opentelemetry-instrumentation-redis = "^0.44b0"
opentelemetry-instrumentation-requests = "^0.44b0"
opentelemetry-instrumentation-sqlalchemy = "^0.44b0"

# Authentication and security dependencies
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-dotenv = "^1.0.0"
bcrypt = "^4.1.2"
opentelemetry-propagator-b3 = "^1.36.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.4.1"
black = "^24.0.0"
ruff = "^0.8.0"
pytest-asyncio = "^1.1.0"
mypy = "^1.17.1"
types-pyyaml = "^6.0.12.20250822"
pandas-stubs = "^2.3.2.250827"
types-psutil = "^7.0.0.20250822"
httpx = "^0.28.1"
pytest-httpx = "^0.35.0"
gql = {extras = ["all"], version = "^4.0.0"}
pytest-benchmark = "^5.1.0"
pylint = "^3.3.8"
pytest-cov = "^5.0.0"
bandit = "^1.7.5"
flake8 = "^7.0.0"
isort = "^5.13.0"
pre-commit = "^3.0.0"
types-passlib = "^1.7.7.20250602"
types-redis = "^4.6.0"
types-requests = "^2.31.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py312']
include = '\.pyi?$'

[tool.ruff]
target-version = "py312"
line-length = 100

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # function call in default argument - false positive for FastAPI Depends()
    "B904", # raise without from - will be addressed in future refactoring
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Start lenient, can tighten later
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
namespace_packages = true
explicit_package_bases = true

# Per-module options
[[tool.mypy.overrides]]
module = [
    "graphrag.*",
    "ollama.*",
    "google.generativeai.*",
    "google.cloud.*"
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
markers = [
    "integration: marks tests as integration tests that require external services (deselect with '-m \"not integration\"')",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
filterwarnings = [
    # Suppress external dependency warnings
    "ignore::UserWarning:google.rpc",
    "ignore::DeprecationWarning:pkg_resources",
    "ignore::DeprecationWarning:google",
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "--strict-markers",
    "--strict-config",
    "-ra"
]
