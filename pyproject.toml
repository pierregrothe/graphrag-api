[tool.poetry]
name = "graphrag_api_service"
version = "0.1.0"
description = ""
authors = ["Pierre Groth√© <pierre@grothe.ca>"]
readme = "README.md"
packages = [{include = "graphrag_api_service", from = "src"}]

[tool.poetry.dependencies]
python = ">=3.12,<3.13"
graphrag = "^2.5.0"
fastapi = "^0.116.1"
uvicorn = {extras = ["standard"], version = "^0.35.0"}
pydantic = "^2.10.0"
pydantic-settings = "^2.7.0"
python-multipart = "^0.0.12"
ollama = "^0.5.3"
google-cloud-aiplatform = "^1.111.0"
google-generativeai = "^0.8.5"
pandas = "^2.3.2"
psutil = "^7.0.0"
strawberry-graphql = {extras = ["fastapi"], version = "^0.281.0"}

[tool.poetry.group.dev.dependencies]
pytest = "^8.4.1"
black = "^24.0.0"
ruff = "^0.8.0"
pytest-asyncio = "^1.1.0"
mypy = "^1.17.1"
types-pyyaml = "^6.0.12.20250822"
pandas-stubs = "^2.3.2.250827"
types-psutil = "^7.0.0.20250822"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py312']
include = '\.pyi?$' 

[tool.ruff]
target-version = "py312"
line-length = 100

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Start lenient, can tighten later
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
namespace_packages = true
explicit_package_bases = true

# Per-module options
[[tool.mypy.overrides]]
module = [
    "graphrag.*",
    "ollama.*",
    "google.generativeai.*",
    "google.cloud.*"
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
markers = [
    "integration: marks tests as integration tests that require external services (deselect with '-m \"not integration\"')",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "--strict-markers",
    "--strict-config",
    "-ra"
]