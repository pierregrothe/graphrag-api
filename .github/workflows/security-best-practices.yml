name: Comprehensive Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run at 2 AM UTC every day for new CVE detection
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      severity_threshold:
        description: 'Minimum severity to fail the build'
        required: false
        default: 'HIGH'
        type: choice
        options:
          - CRITICAL
          - HIGH
          - MEDIUM
          - LOW

# Minimal required permissions (principle of least privilege)
permissions:
  contents: read
  security-events: write  # For uploading SARIF results
  pull-requests: write    # For PR comments
  actions: read
  issues: write          # For creating issues from vulnerabilities

jobs:
  # ==================== Dependency Scanning ====================
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    outputs:
      vulnerabilities: ${{ steps.scan.outputs.vulnerabilities }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Run pip-audit
        id: scan
        run: |
          poetry run pip install pip-audit
          poetry run pip-audit --desc --format json --output audit.json || true
          echo "vulnerabilities=$(jq '.dependencies | map(select(.vulns | length > 0)) | length' audit.json)" >> $GITHUB_OUTPUT

      - name: Upload pip-audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pip-audit-report
          path: audit.json
          retention-days: 30

      - name: Create issue for critical vulnerabilities
        if: steps.scan.outputs.vulnerabilities > 0 && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const audit = JSON.parse(fs.readFileSync('audit.json', 'utf8'));
            const vulns = audit.dependencies.filter(d => d.vulns.length > 0);

            const body = `## Security Alert: Vulnerable Dependencies Found\n\n` +
              vulns.map(d => `- **${d.name}** ${d.version}: ${d.vulns[0].id}`).join('\n');

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `[Security] ${vulns.length} vulnerable dependencies detected`,
              body: body,
              labels: ['security', 'dependencies', 'automated']
            });

  # ==================== Secret Detection ====================
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for secret scanning

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ==================== SAST Analysis ====================
  sast-analysis:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tool: [semgrep, bandit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep
        if: matrix.tool == 'semgrep'
        uses: returntocorp/semgrep-action@v1
        with:
          config: >
            p/security-audit
            p/owasp-top-ten
            p/python
            p/secrets
          generateSarif: true

      - name: Run Bandit
        if: matrix.tool == 'bandit'
        run: |
          pip install bandit[sarif]
          bandit -r src/ -f sarif -o bandit.sarif || true

      - name: Upload SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ matrix.tool }}.sarif
          category: ${{ matrix.tool }}

  # ==================== CodeQL Analysis ====================
  codeql:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          queries: +security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # ==================== License Compliance ====================
  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: License Finder
        run: |
          pip install pip-licenses
          pip-licenses --format=json --with-license-file > licenses.json

      - name: Check for restricted licenses
        run: |
          # Check for GPL, AGPL, or other copyleft licenses
          python -c "
          import json
          with open('licenses.json') as f:
              licenses = json.load(f)
          restricted = ['GPL', 'AGPL', 'LGPL']
          issues = [l for l in licenses if any(r in l.get('License', '') for r in restricted)]
          if issues:
              print(f'Found {len(issues)} packages with restricted licenses')
              for i in issues:
                  print(f\"  - {i['Name']}: {i['License']}\")
              exit(1)
          "

  # ==================== Container Scanning (if applicable) ====================
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: hashFiles('Dockerfile') != ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # ==================== Security Score Calculation ====================
  security-score:
    name: Calculate Security Score
    runs-on: ubuntu-latest
    needs: [dependency-scan, secret-scan, sast-analysis, codeql]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run comprehensive security scan
        run: |
          python scripts/run_security_scan.py --verbose > security_report.txt

      - name: Parse and post results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security_report.txt', 'utf8');

            // Extract security score
            const scoreMatch = report.match(/Security Score: ([\d.]+)\/100/);
            const score = scoreMatch ? parseFloat(scoreMatch[1]) : 0;
            const grade = score >= 80 ? 'A' : score >= 70 ? 'B' : score >= 60 ? 'C' : score >= 50 ? 'D' : 'F';

            const comment = `## ðŸ”’ Security Scan Results\n\n` +
              `**Security Score:** ${score}/100 (Grade: ${grade})\n\n` +
              `<details>\n<summary>View Full Report</summary>\n\n\`\`\`\n${report}\n\`\`\`\n</details>`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

      - name: Security Gate Enforcement
        if: github.event_name == 'pull_request'
        run: |
          SCORE=$(grep "Security Score:" security_report.txt | grep -oE '[0-9]+\.[0-9]+')
          THRESHOLD=70  # Minimum score for PR approval

          if (( $(echo "$SCORE < $THRESHOLD" | bc -l) )); then
            echo "Security score $SCORE is below threshold $THRESHOLD"
            exit 1
          fi

  # ==================== Compliance Report ====================
  compliance-report:
    name: Generate Compliance Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, secret-scan, sast-analysis, codeql, license-check]
    if: github.event_name == 'schedule'
    steps:
      - name: Generate compliance report
        run: |
          echo "# Security Compliance Report" > compliance.md
          echo "Date: $(date)" >> compliance.md
          echo "" >> compliance.md
          echo "## OWASP Top 10 Coverage" >> compliance.md
          echo "- [x] A01:2021 â€“ Broken Access Control" >> compliance.md
          echo "- [x] A02:2021 â€“ Cryptographic Failures" >> compliance.md
          echo "- [x] A03:2021 â€“ Injection" >> compliance.md
          echo "" >> compliance.md
          echo "## Scan Results Summary" >> compliance.md
          echo "All security scans completed successfully" >> compliance.md

      - name: Upload compliance report
        uses: actions/upload-artifact@v4
        with:
          name: compliance-report
          path: compliance.md
          retention-days: 90
